@page "/category"
@using SharedModels.Models
@inject HttpClient httpClient;
<h3>Category Component</h3>

<div class="contaier">
    <EditForm Model="@category">
         <div class="form-group">
            <label>Category Row Id</label>
            <InputNumber @bind-Value="category.CategoryRowId" class="form-control"></InputNumber>
        </div>
        <div class="form-group">
            <label>Category Id</label>
            <InputText @bind-Value="category.CategoryId" class="form-control"></InputText>
        </div>
         <div class="form-group">
            <label>Category Name</label>
            <InputText @bind-Value="category.CategoryName" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label>Base Proce</label>
            <InputNumber @bind-Value="category.BasePrice" class="form-control"></InputNumber>
        </div>
        <div class="form-group">
             <input type="button" value="Clear" class="btn btn-warning"
             @onclick="Clear"/>
              <input type="button" value="Save" class="btn btn-success"
               @onclick="Save"/>
        </div>
    </EditForm>
    <hr/>
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>Category Row Id</th>
                <th>Category Id</th>
                <th>Category Name</th>
                <th>Base Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cat in categories)
           {
               <tr>
                   <td>@cat.CategoryRowId</td>
                   <td>@cat.CategoryId</td>     
                   <td>@cat.CategoryName</td>
                   <td>@cat.BasePrice</td>
               </tr>
           }
        </tbody>
    </table>
</div>



@code {
    Category category;
    List<Category> categories;

    protected override async Task OnInitializedAsync()
    {
        category = new Category();
        categories = new List<Category>();

        await LoadData();

        //   return base.OnInitializedAsync();
    }

    private async Task LoadData()
    {
        categories = await httpClient.GetFromJsonAsync<List<Category>>("https://localhost:7091/api/Category");    
    }

    void Clear()
    {
        category = new Category();
    }

    async Task Save()
    {
        var res = await httpClient.PostAsJsonAsync<Category>("https://localhost:7091/api/Category", category); 
    }
}
